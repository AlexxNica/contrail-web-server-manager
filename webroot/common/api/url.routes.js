/*
 * Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
 */

/* This file is automatically generated from the parseURL.xml at
   Wed Aug 12 2015 14:10:40 GMT-0700 (PDT)
   Please do not edit this file.
 */

var parseURLReq = require(process.mainModule.exports["corePath"] + '/src/serverroot/common/parseURLRequire')
  , timeout = require('request-timeout')
  , smapi = require('../api/sm.api')
  ;


if (!module.parent) {
  console.log("Call main app through 'node app'");
  process.exit(1);
}
urlRoutes = module.exports;

/* Default handler for request timeout */
function defHandleReqTimeout (req, res)
{
  var str = "Request timed out: URL::" + req.url;
  if (req.pubChannel) {
    /* Delete the Req Pending Q Entry */
    parseURLReq.cacheApi.deleteCachePendingQueueEntry(req.pubChannel);
  };
  res.req.invalidated = true;
  res.send(parseURLReq.global.HTTP_STATUS_GATEWAY_TIMEOUT, str);
}

urlRoutes.registerURLsToApp = function(app) {
/* Register the URL with callback */
  app.get('/sm/objects/:name', smapi_getObjects);
  app.put('/sm/objects/:name', smapi_putObjects);
  app.post('/sm/objects/:name', smapi_postObjects);
  app.delete('/sm/objects/:name', smapi_deleteObjects);
  app.get('/sm/objects/details/:name', smapi_getObjectsDetails);
  app.get('/sm/server/ipmiinfo/:id', smapi_getServerIPMIInfo);
  app.get('/sm/server/monitoring/info', smapi_getMonitoringInfo4Servers);
  app.get('/sm/server/monitoring/info/summary', smapi_getMonitoringInfoSummary4Servers);
  app.get('/sm/server/monitoring/config', smapi_getServerManagerMonitoringConfig);
  app.get('/sm/server/inventory/info', smapi_getInventoryInfo4Servers);
  app.get('/sm/tags/values', smapi_getTagValues);
  app.get('/sm/tags/names', smapi_getTagNames);
  app.get('/sm/chassis/ids', smapi_getChassisIds);
  app.get('/sm/tags/values/:name', smapi_getTagValues);
  app.post('/sm/server/provision', smapi_provision);
  app.post('/sm/server/reimage', smapi_reimage);


  parseURLReq.rbac.setFeatureByURL('/sm/objects/:name', 'get', app.routes, 'smConfigure');
  parseURLReq.rbac.setFeatureByURL('/sm/objects/:name', 'put', app.routes, 'smConfigure');
  parseURLReq.rbac.setFeatureByURL('/sm/objects/:name', 'post', app.routes, 'smConfigure');
  parseURLReq.rbac.setFeatureByURL('/sm/objects/:name', 'delete', app.routes, 'smConfigure');
  parseURLReq.rbac.setFeatureByURL('/sm/objects/details/:name', 'get', app.routes, 'smConfigure');
  parseURLReq.rbac.setFeatureByURL('/sm/server/ipmiinfo/:id', 'get', app.routes, 'smConfigure');
  parseURLReq.rbac.setFeatureByURL('/sm/server/monitoring/info', 'get', app.routes, 'smConfigure');
  parseURLReq.rbac.setFeatureByURL('/sm/server/monitoring/info/summary', 'get', app.routes, 'smConfigure');
  parseURLReq.rbac.setFeatureByURL('/sm/server/monitoring/config', 'get', app.routes, 'smConfigure');
  parseURLReq.rbac.setFeatureByURL('/sm/server/inventory/info', 'get', app.routes, 'smConfigure');
  parseURLReq.rbac.setFeatureByURL('/sm/tags/values', 'get', app.routes, 'smConfigure');
  parseURLReq.rbac.setFeatureByURL('/sm/tags/names', 'get', app.routes, 'smConfigure');
  parseURLReq.rbac.setFeatureByURL('/sm/chassis/ids', 'get', app.routes, 'smConfigure');
  parseURLReq.rbac.setFeatureByURL('/sm/tags/values/:name', 'get', app.routes, 'smConfigure');
  parseURLReq.rbac.setFeatureByURL('/sm/server/provision', 'post', app.routes, 'smConfigure');
  parseURLReq.rbac.setFeatureByURL('/sm/server/reimage', 'post', app.routes, 'smConfigure');
}
smapi_getObjects = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, smapi.getObjects);
  }
}
smapi_putObjects = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, smapi.putObjects);
  }
}
smapi_postObjects = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, smapi.postObjects);
  }
}
smapi_deleteObjects = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, smapi.deleteObjects);
  }
}
smapi_getObjectsDetails = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, smapi.getObjectsDetails);
  }
}
smapi_getServerIPMIInfo = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, smapi.getServerIPMIInfo);
  }
}
smapi_getMonitoringInfo4Servers = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, smapi.getMonitoringInfo4Servers);
  }
}
smapi_getMonitoringInfoSummary4Servers = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, smapi.getMonitoringInfoSummary4Servers);
  }
}
smapi_getServerManagerMonitoringConfig = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, smapi.getServerManagerMonitoringConfig);
  }
}
smapi_getInventoryInfo4Servers = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, smapi.getInventoryInfo4Servers);
  }
}
smapi_getTagValues = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, smapi.getTagValues);
  }
}
smapi_getTagNames = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, smapi.getTagNames);
  }
}
smapi_getChassisIds = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, smapi.getChassisIds);
  }
}
smapi_getTagValues = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, smapi.getTagValues);
  }
}
smapi_provision = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, smapi.provision);
  }
}
smapi_reimage = function(req, res, next) {
  /* Check if this request needs to be added in 
     pendingQ 
   */
  var reqCtx = parseURLReq.longPoll.routeAll(req, res, next);
  if (null == reqCtx) {
    /* either not a valid URL, or unAuthed session */
  } else {
    /* Set the request timeout */
    parseURLReq.timeout(req, res, parseURLReq.global.DFLT_HTTP_REQUEST_TIMEOUT_TIME);
    req.once('timeout', defHandleReqTimeout);
    /* Now process the resuest */
    parseURLReq.longPoll.processPendingReq(reqCtx, next, smapi.reimage);
  }
}
